name: Deploy GitHub Pages

on:
  push:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"
    
    - name: Install TinyTeX and system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y poppler-utils imagemagick
        wget -qO- "https://yihui.org/tinytex/install-bin-unix.sh" | sh
        echo "export PATH=$HOME/.TinyTeX/bin/x86_64-linux:$PATH" >> $GITHUB_ENV
        export PATH="$HOME/.TinyTeX/bin/x86_64-linux:$PATH"
        # Install only packages we need that aren't already included
        tlmgr install enumitem pgf xcolor fancyhdr booktabs tcolorbox || true
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Configure ImageMagick for PDF conversion
      run: |
        sudo sed -i 's/rights="none" pattern="PDF"/rights="read|write" pattern="PDF"/' /etc/ImageMagick-6/policy.xml
    
    - name: Generate figures and sample PDFs
      run: |
        export PATH="$HOME/.TinyTeX/bin/x86_64-linux:$PATH"
        python generate_figures.py
        python main.py --seed 42 --sets 2 --mcq 4 --subjective 3
        ls -la output/
    
    - name: Convert PDF to images for preview
      run: |
        mkdir -p docs/assets/images
        # Convert all pages of both PDFs to PNG with high quality
        if [ -f output/quiz_set_1.pdf ]; then
          pdftoppm -png -r 200 output/quiz_set_1.pdf docs/assets/images/quiz_set_1_page
          pdftoppm -png -r 200 output/quiz_set_2.pdf docs/assets/images/quiz_set_2_page
          echo "PDF pages converted to PNG previews"
        else
          echo "PDF not found, creating placeholder"
          mkdir -p docs/assets/images
          # Create a placeholder image
          convert -size 800x600 xc:lightblue -gravity center -pointsize 36 -annotate +0+0 "Quiz Preview\n(PDF compilation required)" docs/assets/images/quiz_preview.png
        fi
    
    - name: Create GitHub Pages site from README
      run: |
        mkdir -p docs
        
        # Copy README as index and fix asset paths for GitHub Pages
        echo "📋 Copying README.md to docs/index.md"
        cp README.md docs/index.md
        
        echo "🔧 Fixing asset paths in docs/index.md"
        sed -i 's|docs/assets/|assets/|g' docs/index.md
        
        # Also copy PDFs to assets if they exist
        if [ -f output/quiz_set_1.pdf ]; then
          mkdir -p docs/assets
          cp output/quiz_set_1.pdf docs/assets/
          cp output/quiz_set_2.pdf docs/assets/
          echo "📄 PDFs copied to assets"
        fi
        
        echo "📁 Files in docs directory:"
        ls -la docs/
        
        echo "📄 First 20 lines of docs/index.md:"
        head -20 docs/index.md
        
        echo "🔍 Checking for asset references:"
        grep -n "assets/" docs/index.md | head -5 || echo "No asset references found"
        
        # Create Jekyll configuration
        cat > docs/_config.yml << 'EOF'
        title: "Setwise Quiz Generator"
        description: "Professional LaTeX Quiz Generation with Python"
        theme: jekyll-theme-cayman
        plugins:
          - jekyll-relative-links
        relative_links:
          enabled: true
          collections: true
        include:
          - README.md
        markdown: kramdown
        highlighter: rouge
        baseurl: "/setwise"
        url: "https://nipunbatra.github.io"
        EOF
        
        # Add .nojekyll file to ensure proper deployment
        touch docs/.nojekyll
        
        echo "🏗️ Final docs directory structure:"
        find docs -type f -name "*.md" -o -name "*.yml" -o -name "*.png" -o -name "*.pdf" -o -name ".nojekyll" | sort
        
        echo "📊 Directory sizes:"
        du -sh docs/
        du -sh docs/assets/ 2>/dev/null || echo "No assets directory"
    
    - name: Setup Pages
      uses: actions/configure-pages@v4
    
    - name: Upload docs for inspection
      uses: actions/upload-artifact@v4
      with:
        name: debug-docs-directory
        path: docs/
        retention-days: 1
    
    - name: Upload artifact
      uses: actions/upload-pages-artifact@v3
      with:
        path: './docs'
    
    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4
    
    - name: Verify deployment
      run: |
        echo "🚀 Deployment completed!"
        echo "📡 Site URL: ${{ steps.deployment.outputs.page_url }}"
        echo "🔗 Direct link: https://nipunbatra.github.io/setwise/"
        
        # Wait a moment and try to curl the site
        sleep 30
        echo "🌐 Testing site accessibility..."
        curl -I https://nipunbatra.github.io/setwise/ || echo "❌ Site not accessible yet"